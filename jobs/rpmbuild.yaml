- job-template:
    name: ci-pipeline-rpmbuild
    defaults: ci-pipeline-defaults
    concurrent: false
    logrotate:
      numToKeep: 30
      artifactNumToKeep: 15
# TODO: trigger
    parameters:
        - string:
            name: FEDMSG
            description: |
              fedmsg
    builders:
        - shell: |
            #!/bin/bash
            set -xuo pipefail

            # Write script to parse fields (can likely be improved)
            cat << EOF > ${{WORKSPACE}}/parse_fedmsg.py
            #!/bin/env python
            import json
            import sys

            message = json.load(sys.stdin)
            if 'msg' in message:
                if 'commit' in message['msg']
                     msg = message['msg']['commit']
            
                for key in msg:
                    print "fed_%s=%s" % (key, msg[key])
            EOF
            chmod +x ${{WORKSPACE}}/parse_fedmsg.py

            # Write fedmsg fields to a file to inject them
            if [ -n "$FEDMSG" ]; then
                echo $FEDMSG | ${{WORKSPACE}}/parse_fedmsg.py > fedmsg_fields.txt
            fi

        - inject:
            properties-file: ${{WORKSPACE}}/fedmsg_fields.txt
        - system-groovy:
           command: build.description = build.getEnvironment().get('fed_repo')
        - shell: |
            set +e

            # Verify this is a development branch
            branch=$fed_branch
            if [ "$branch" = "master" ]; then
                branch="rawhide"
            fi
            curl -f -s http://dl.fedoraproject.org/pub/fedora/linux/development/$branch/Everything > /dev/null
            if [ $? -ne 0 ]; then echo "Not a development branch"; exit; fi

            # Verify this is a package we are interested in
            valid=0
            for package in $(cat aos-ci/config/package_list); do
                if [ "$package" = "$fed_repo" ]; then
                    valid=1
                    break
                fi
            done
            if [ $valid -eq 0 ]; then
                echo "Not a package we are interested in"; exit; fi
            fi

            # Need to test to make sure fedpkg rpm is installed
            which fedpkg
            if [ "$?" != 0 ]; then echo "ERROR: FEDPKG RPM NOT INSTALLED\nSTATUS: $?"; exit 1; fi
            # Clone the fedoraproject git repo
            fedpkg clone -a $fed_repo
            if [ "$?" != 0 ]; then echo "ERROR: FEDPKG CLONE\nSTATUS: $?"; exit 1; fi
            pushd $fed_repo
            # Checkout the proper branch
            git checkout $fed_branch
            # Checkout the commit from the fedmsg
            git checkout $fed_rev
            # Create new branch because fedpkg wont build with detached head
            git branch -b test_branch
            # fedpkg prep to unpack the tarball
            fedpkg --release $fed_branch prep
            # Make sure we have rpmspec before we call it
            which rpmspec
            if [ "$?" != 0 ]; then echo "ERROR: RPMSPEC RPM NOT INSTALLED\nSTATUS: $?"; exit 1; fi
            VERSION=$(rpmspec --queryformat "${{VERSION}}\n" -q ${{fed_rev}}.spec | head -n 1)
            pushd ${{fed_rev}}-$VERSION
            ./configure
            # Run tests if they are there
            make test
            MAKE_TEST_STATUS=$?
            popd
            if [ "$MAKE_TEST_STATUS" == 2 ]; then
                 echo "description='$fed_repo - No tests'" >> ${{WORKSPACE}}/fedmsg_fields.txt
            else
                 echo "description=$fed_repo" >> ${{WORKSPACE}}/fedmsg_fields.txt
            fi
            # Build the package into ./results_$fed_repo/$VERSION/$RELEASE/
            fedpkg --release $fed_branch mockbuild
            if [ "$?" != 0 ]; then echo "ERROR: FEDPKG MOCKBUILD\nSTATUS: $?"; exit 1; fi
            popd

            # Run fedabipkgdiff against the newly created rpm
            git clone git://sourceware.org/git/libabigail.git
            ABIGAIL_BRANCH=$(echo $fed_branch | sed 's/./&c/1')
            libabigail/tools/fedabipkgdiff --from ${{ABIGAIL_BRANCH}} ${{fed_repo}}/results_${{fed_repo}}/${{VERSION}}/*/*.rpm > ${{WORKSPACE}}/fedabipkgdiff_out.txt

            # TODO: get rest of the rpms and build ostree
            
            exit 0
        - inject:
            properties-file: ${{WORKSPACE}}/fedmsg_fields.txt
        - system-groovy:
           command: build.description = build.getEnvironment().get('description')

    publishers:
      - archive:
          artifacts: '*.*'
          allow-empty: 'true'

## Describes the project
- project:
    name: ci-pipeline-rpmbuild-jobs
    jobs:
      - ci-pipeline-rpmbuild

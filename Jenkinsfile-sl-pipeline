@Library(['github.com/CentOS-PaaS-SIG/ci-pipeline@master', 'github.com/CentOS/cico-pipeline-library@master'])
import org.centos.pipeline.*
import org.centos.*


properties(
        [
                buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '25', daysToKeepStr: '', numToKeepStr: '50')),
                disableConcurrentBuilds(),
                parameters(
                        [
                                string(description: 'CI Message that triggered the pipeline', name: 'CI_MESSAGE'),
                                string(defaultValue: 'f26', description: 'Fedora target branch', name: 'TARGET_BRANCH'),
                                string(defaultValue: 'ci-pipeline', description: 'Main project repo', name: 'PROJECT_REPO'),
                                string(defaultValue: 'org.centos.stage', description: 'Main topic to publish on', name: 'MAIN_TOPIC'),
                                string(defaultValue: 'fedora-fedmsg', description: 'Main provider to send messages on', name: 'MSG_PROVIDER'),
                                booleanParam(defaultValue: false, description: 'Force generation of the image', name: 'GENERATE_IMAGE'),
                        ]
                ),
        ]
)

podTemplate(name: 'fedora-atomic-inline', label: 'fedora-atomic-inline', cloud: 'openshift', serviceAccount: 'jenkins',
        idleMinutes: 1,  namespace: 'continuous-infra',
        containers: [
                // This adds the custom slave container to the pod. Must be first with name 'jnlp'
                containerTemplate(name: 'jnlp',
                        image: '172.30.254.79:5000/continuous-infra/jenkins-continuous-infra-slave',
                        ttyEnabled: false,
                        args: '${computer.jnlpmac} ${computer.name}',
                        command: '',
                        workingDir: '/tmp'),
        ])

        {

            node('fedora-atomic-inline') {
                ansiColor('xterm') {
                    timestamps {
                        def getMessage = new Messaging()

                        try {
                            deleteDir()
                            cicdPipeline {}
                        } catch (err) {
                            echo err.getMessage()
                            throw err
                        } finally {
                            currentBuild.displayName = "Build#: ${env.BUILD_NUMBER} - Branch: ${env.branch} - Package: ${env.fed_repo}"
                            currentBuild.description = "Pipeline Build Status: ${currentBuild.currentResult}"

                            //emailext subject: "${env.JOB_NAME} - Build # ${env.BUILD_NUMBER} - STATUS = ${currentBuild.currentResult}", to: "ari@redhat.com", body: "This pipeline was a ${currentBuild.currentResult}"

                            step([$class: 'ArtifactArchiver', allowEmptyArchive: true,
                                  artifacts: '**/logs/**,*.txt,*.groovy,**/job.*,**/*.groovy,**/inventory.*', excludes: '**/*.example',
                                  fingerprint: true])

                            // Send message org.centos.prod.ci.pipeline.complete on fedmsg
                            env.topic = "${env.MAIN_TOPIC}.ci.pipeline.complete"
                            getMessage.sendMessage([topic:"${env.topic}",
                                                    provider:"${env.MSG_PROVIDER}",
                                                    msgType:'custom',
                                                    msgProps:"${env.MSG_PROPS}",
                                                    msgContent:"${env.MSG_CONTENTS}"])
                        }
                    }
                }
            }
        }
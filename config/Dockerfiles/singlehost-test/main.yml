---
- name: Add executor host
  add_host:
    name: executor
    ansible_connection: local
    ansible_ssh_host: 127.0.0.1
    ansible_ssh_connection: local
- name: Packages to be present on the system.
  set_fact:
    # Separate debuginfo and ordinary packages. There is an issue on GitHub:
    # https://github.com/ansible/ansible/issues/31579. The easiest way to
    # install debuginfo for package is to use 'debuginfo-install'.  This
    # program is present on RHEL/CentOS/Fedora and it automatically enables
    # debuginfo repos.
    pkgs_ordinary_req: >
      {{
        required_packages |
        reject('match', '.*-debuginfo$') |
        list
      }}
    pkgs_debuginfo_req: >
      {{
        required_packages |
        select('match', '.*-debuginfo$') |
        list |
        regex_replace('-debuginfo')
      }}
- name: Target OS identification
  block:
    - name: Test if system is Atomic Host
      lineinfile:
        name: /etc/os-release
        regexp: .*Atomic Host.*
        state: absent
      check_mode: yes
      changed_when: False
      register: os_release_atomic
    - name: Set Ansible fact 'is_atomic_host'
      set_fact:
        is_atomic_host: "{{ os_release_atomic.found > 0 }}"
- block:
  - name: Gather facts
    setup:
    delegate_facts: True
  - name: Add restraint repo for restraint-rhts on Fedora hosts
    shell: curl -o /etc/yum.repos.d/bpeck-restraint-fedora-rawhide.repo https://copr.fedorainfracloud.org/coprs/bpeck/restraint/repo/fedora-rawhide/bpeck-restraint-fedora-rawhide.repo
    when: ansible_distribution == 'Fedora'
  - name: Add restraint repo for restraint-rhts on RHEL/CentOS hosts
    block:
      - package: name=yum-plugin-copr
      - shell: yum copr -y enable bpeck/restraint
    when: "[ansible_distribution] | intersect(['RedHat', 'CentOS'])"
  - name: Install the beakerlib requirements
    package: name={{item}} state=latest
    with_items:
    - beakerlib
    - restraint-rhts
    - rsync
  delegate_to: executor
- block:
  - name: Install the beakerlib requirements on target
    package: name={{item}} state=latest
    with_items:
    - rsync
    - findutils
  - name: Install any test-specific package requirements
    # Note, this method cannot install -debuginfo packages.
    package: name={{item}} state=latest
    with_items:
      - "{{ pkgs_ordinary_req }}"
  - block:
    - name: Install yum-utils
      package: name=yum-utils state=latest
      when: ansible_pkg_mgr == 'yum'
    - name: Install dnf-utils
      # System can have installed yum-utils. Which conflicts wih dnf-utils.
      # Therefore, remove yum-utils and install dnf-utils.
      shell: dnf --assumeyes --allowerasing install dnf-utils
      when: ansible_pkg_mgr == 'dnf'
    - name: Care about debuginfo packages for DNF/YUM systems
      shell: |
          debuginfo-install --assumeyes {{item}}
      with_items:
          - "{{ pkgs_debuginfo_req }}"
    when:
      - "[ansible_pkg_mgr] | intersect(['dnf', 'yum'])"
      - pkgs_debuginfo_req
  # Only manually install packages on non atomic hosts
  when: ansible_pkg_mgr != 'unknown'
- block:
  - name: Check presence of required packages for Atomic Host
    shell: rpm -q {{ pkgs_ordinary_req|join(" ") }}
    register: package_check
    changed_when: False
    failed_when: False
    args: { warn: no }
  - name: Install required packages at Atomic Host
    shell:
      rpm-ostree install {{ pkgs_ordinary_req|join(" ") }}
      && rpm-ostree ex livefs
    when: package_check.rc != 0
  when:
    - is_atomic_host
    - pkgs_ordinary_req
- name: Define remote_artifacts if it is not already defined
  set_fact:
    remote_artifacts: /tmp/artifacts
  when: remote_artifacts is not defined
- name: Put beakerlib binaries on the target
  copy:
    src: "{{item}}"
    dest: /usr/local/bin/
    mode: 755
  with_fileglob:
    - "/usr/bin/beakerlib-*"
    - "/usr/share/beakerlib/*"
    - "/usr/bin/rhts-*"
    - "/usr/share/rhts/*"
    - "/usr/share/rhts/lib/*"
    - "/usr/bin/rstrnt-*"
    - "/usr/share/restraint/*"
    - "rpm.py"
- name: Copy tests to target
  synchronize:
    src: "{{ playbook_dir }}/"
    dest: /usr/local/bin/
    ssh_args: "-o UserKnownHostsFile=/dev/null"
- name: Fix up beakerlib
  shell: >
    find /usr/local/bin -type f
    |
    xargs sed -i
    -e 's|/usr/share/beakerlib|/usr/local/bin|g'
    -e 's|/usr/lib/beakerlib|/usr/local/bin|g'
    -e 's|/usr/share/rhts/lib/rhts-|/usr/local/bin/rhts-|g'
    -e 's|/usr/bin/rhts-|/usr/local/bin/rhts-|g'
    -e 's|/usr/share/rhts/lib/rhts_|/usr/local/bin/rhts-|g'
    -e 's|/usr/bin/rhts_|/usr/local/bin/rhts-|g'
    -e 's|/usr/share/rhts-library/rhtslib.sh|/usr/local/bin/beakerlib.sh|g'
    -e 's|/usr/bin/rstrnt-|/usr/local/bin/rstrnt-|g'
- name: Make artifacts directory
  file: path={{ remote_artifacts }} state=directory owner=root mode=755 recurse=yes
- block:
  - name: Execute beakerlib tests
    shell: |
      export OUTPUTFILE=/dev/stdout TEST={{ item }}
      logfile={{ remote_artifacts }}/test.$(echo {{ item }} | sed -e 's/\//-/g').log
      exec 2>>$logfile 1>>$logfile
      cd /usr/local/bin
      if [ -f {{ item }} ]; then
         cd $(dirname {{ item }})
         /bin/sh -e ./$(basename {{ item }})
      elif [ -d {{ item }} ]; then
        cd {{ item }}
        if [ -f runtest.sh ]; then
          /bin/sh -e ./runtest.sh
        elif [ -f Makefile ]; then
          make run
        else
          echo "FAIL don't know how to run test {{ item }}"
        fi
      else
        echo "FAIL test {{ item }} does not appear to be a file or directory"
      fi
    with_items:
    - "{{ tests }}"
  always:
  - name: Make the master test summary log artifact
    shell: |
      logfile={{ remote_artifacts }}/test.$(echo {{ item }} | sed -e 's/\//-/g').log
      if grep -q '\[ *FAIL *\]' "$logfile"; then
        echo "FAIL {{ item }}" >> {{ remote_artifacts }}/test.log
      elif grep -q '\[ *PASS *\]' "$logfile"; then
        echo "PASS {{ item }}" >> {{ remote_artifacts }}/test.log
      elif grep -q FAIL "$logfile"; then
        echo "FAIL {{ item }}" >> {{ remote_artifacts }}/test.log
      elif grep -q PASS "$logfile"; then
        echo "PASS {{ item }}" >> {{ remote_artifacts }}/test.log
      else
        echo "UNKNOWN {{ item }}" >> {{ remote_artifacts }}/test.log
      fi
    with_items:
    - "{{ tests }}"
  - name: Pull out the logs
    synchronize:
      dest: "{{ artifacts }}/"
      src: "{{ remote_artifacts }}/"
      mode: pull
      ssh_args: "-o UserKnownHostsFile=/dev/null"
    when: artifacts|default("") != ""
  # Can't go in block. See
  # https://github.com/ansible/ansible/issues/20736
  - name: Check the results
    shell: grep "^FAIL" {{ remote_artifacts }}/test.log
    register: test_fails
    failed_when: test_fails.stdout or test_fails.stderr
